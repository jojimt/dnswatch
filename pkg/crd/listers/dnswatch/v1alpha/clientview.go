/***
Copyright 2020 Cisco Systems Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha

import (
	v1alpha "github.com/jojimt/dnswatch/pkg/crd/apis/dnswatch/v1alpha"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClientViewLister helps list ClientViews.
type ClientViewLister interface {
	// List lists all ClientViews in the indexer.
	List(selector labels.Selector) (ret []*v1alpha.ClientView, err error)
	// ClientViews returns an object that can list and get ClientViews.
	ClientViews(namespace string) ClientViewNamespaceLister
	ClientViewListerExpansion
}

// clientViewLister implements the ClientViewLister interface.
type clientViewLister struct {
	indexer cache.Indexer
}

// NewClientViewLister returns a new ClientViewLister.
func NewClientViewLister(indexer cache.Indexer) ClientViewLister {
	return &clientViewLister{indexer: indexer}
}

// List lists all ClientViews in the indexer.
func (s *clientViewLister) List(selector labels.Selector) (ret []*v1alpha.ClientView, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha.ClientView))
	})
	return ret, err
}

// ClientViews returns an object that can list and get ClientViews.
func (s *clientViewLister) ClientViews(namespace string) ClientViewNamespaceLister {
	return clientViewNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClientViewNamespaceLister helps list and get ClientViews.
type ClientViewNamespaceLister interface {
	// List lists all ClientViews in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha.ClientView, err error)
	// Get retrieves the ClientView from the indexer for a given namespace and name.
	Get(name string) (*v1alpha.ClientView, error)
	ClientViewNamespaceListerExpansion
}

// clientViewNamespaceLister implements the ClientViewNamespaceLister
// interface.
type clientViewNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClientViews in the indexer for a given namespace.
func (s clientViewNamespaceLister) List(selector labels.Selector) (ret []*v1alpha.ClientView, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha.ClientView))
	})
	return ret, err
}

// Get retrieves the ClientView from the indexer for a given namespace and name.
func (s clientViewNamespaceLister) Get(name string) (*v1alpha.ClientView, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha.Resource("clientview"), name)
	}
	return obj.(*v1alpha.ClientView), nil
}
